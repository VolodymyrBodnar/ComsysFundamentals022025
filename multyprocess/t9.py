import os
import wikipediaapi
from multiprocessing import Pool
from collections import defaultdict
import re

# ---------------------- 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–µ–π –∑ –í—ñ–∫—ñ–ø–µ–¥—ñ—ó ----------------------
wiki = wikipediaapi.Wikipedia(
    language="uk",
    user_agent="MyWikipediaBot/1.0 (contact: myemail@example.com)"
)

articles = [
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –Ω–∞—É–∫–∏",
    "–û–±—á–∏—Å–ª—é–≤–∞–ª—å–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞",
    "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç",
    "–ë–æ–≥–¥–∞–Ω –•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π",
    "–£–∫—Ä–∞—ó–Ω–∞"
]

def fetch_wikipedia_article(title):
    """–û—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ –∑ –í—ñ–∫—ñ–ø–µ–¥—ñ—ó"""
    page = wiki.page(title)
    if not page.exists():
        return ""
    text = page.text
    text = re.sub(r'\n+', ' ', text)  # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤
    text = re.sub(r'[^–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“êa-zA-Z0-9\s]', '', text)  # –í–∏–¥–∞–ª—è—î–º–æ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó
    return text.lower()

def create_corpus_from_wikipedia():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ç–∞—Ç—Ç—ñ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ—Ä–ø—É—Å"""
    with Pool() as pool:
        texts = pool.map(fetch_wikipedia_article, articles)
    
    corpus_text = " ".join(texts).strip()

    if not corpus_text:
        print("‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –∫–æ—Ä–ø—É—Å! –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å—Ç–∞—Ç—Ç—ñ —ñ—Å–Ω—É—é—Ç—å.")
        return False

    with open("corpus.txt", "w", encoding="utf-8") as f:
        f.write(corpus_text)
    
    print(f"‚úÖ –ö–æ—Ä–ø—É—Å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –î–æ–≤–∂–∏–Ω–∞: {len(corpus_text)} —Å–∏–º–≤–æ–ª—ñ–≤.")
    return True

# ---------------------- 2. –ß–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–ø—É—Å—É ----------------------
def read_corpus():
    """–ß–∏—Ç–∞—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ—Ä–ø—É—Å"""
    if not os.path.exists("corpus.txt"):
        print("‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –§–∞–π–ª corpus.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return ""
    
    with open("corpus.txt", "r", encoding="utf-8") as f:
        return f.read().strip()

# ---------------------- 3. –§–∞–∑–∞ Map: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è n-–≥—Ä–∞–º ----------------------
def generate_ngrams(text, n=2):
    """–ì–µ–Ω–µ—Ä—É—î n-–≥—Ä–∞–º—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –±—ñ–≥—Ä–∞–º–∏)"""
    words = text.split()
    if len(words) < n:
        return []
    ngrams = [tuple(words[i:i + n]) for i in range(len(words) - n + 1)]
    return [(ngram, 1) for ngram in ngrams]

def generate_ngrams_wrapper(args):
    """–û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è multiprocessing"""
    text, n = args
    return generate_ngrams(text, n)

# ---------------------- 4. –§–∞–∑–∞ Shuffle: –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è n-–≥—Ä–∞–º ----------------------
def shuffle(mapped_data):
    """–ì—Ä—É–ø—É—î n-–≥—Ä–∞–º—É –∑–∞ –∫–ª—é—á–µ–º"""
    grouped_data = defaultdict(list)
    for key, value in mapped_data:
        grouped_data[key].append(value)
    return grouped_data

# ---------------------- 5. –§–∞–∑–∞ Reduce: –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—Ç–æ—Ç n-–≥—Ä–∞–º ----------------------
def reduce_function(key_values):
    """–û–±—á–∏—Å–ª—é—î —Å—É–º—É —á–∞—Å—Ç–æ—Ç –¥–ª—è –∫–æ–∂–Ω–æ—ó n-–≥—Ä–∞–º–∏"""
    key, values = key_values
    return (key, sum(values))

# ---------------------- 6. –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–æ–≤–∞ ----------------------
def predict_next_word(context, model, n):
    """–ü—Ä–æ–≥–Ω–æ–∑—É—î –Ω–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ n-–≥—Ä–∞–º"""
    words = context.split()
    if len(words) < n - 1:
        print("‚ùå –í–≤–µ–¥–µ–Ω–æ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–æ —Å–ª—ñ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É!")
        return None

    context_tuple = tuple(words[-(n - 1):])  # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ n-1 —Å–ª—ñ–≤
    candidates = {key[-1]: count for key, count in model.items() if key[:-1] == context_tuple}

    if not candidates:
        print(f"‚ùå –ù–µ–º–∞—î –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {context_tuple}")
        return None

    return max(candidates, key=candidates.get)  # –ù–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ—à–µ —Å–ª–æ–≤–æ

# ---------------------- 7. –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ----------------------
if __name__ == "__main__":
    print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–µ–π –∑ –í—ñ–∫—ñ–ø–µ–¥—ñ—ó...")
    if not create_corpus_from_wikipedia():
        exit(1)

    print("üìñ –ß–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–ø—É—Å—É...")
    text = read_corpus()
    if not text:
        print("‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –ö–æ—Ä–ø—É—Å –ø–æ—Ä–æ–∂–Ω—ñ–π! –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è.")
        exit(1)

    n = int(input("üî¢ –í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è n –¥–ª—è n-–≥—Ä–∞–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2 –¥–ª—è –±—ñ–≥—Ä–∞–º, 3 –¥–ª—è —Ç—Ä–∏–≥—Ä–∞–º): ").strip())

    print("üî® –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É...")
    with Pool() as pool:
        mapped_results = pool.map(generate_ngrams_wrapper, [(text, n)])

    flat_mapped = [pair for sublist in mapped_results for pair in sublist]

    if not flat_mapped:
        print("‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó n-–≥—Ä–∞–º–Ω–æ—ó –ø–∞—Ä–∏. –ú–æ–∂–ª–∏–≤–æ, —Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π?")
        exit(1)

    print("üîÑ –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è n-–≥—Ä–∞–º...")
    shuffled = shuffle(flat_mapped)

    print("üßÆ –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—Ç–æ—Ç n-–≥—Ä–∞–º...")
    with Pool() as pool:
        reduced_results = pool.map(reduce_function, shuffled.items())

    final_model = dict(reduced_results)

    if not final_model:
        print("‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –ú–æ–¥–µ–ª—å –ø–æ—Ä–æ–∂–Ω—è! –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ n-–≥—Ä–∞–º–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        exit(1)

    # ---------------------- CLI ----------------------
    print("\nü§ñ Simple CLI Chatbot using n-gram Model")
    print("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤, —ñ –±–æ—Ç —Å–ø—Ä–æ–≥–Ω–æ–∑—É—î –Ω–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ (–Ω–∞–ø–∏—à—ñ—Ç—å 'exit' –¥–ª—è –≤–∏—Ö–æ–¥—É).")

    while True:
        user_input = input("\n–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–∞: ").strip().lower()
        if user_input == "exit":
            print("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! üëã")
            break

        prediction = predict_next_word(user_input, final_model, n)
        if prediction:
            print(f"ü§ñ –ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–µ —Å–ª–æ–≤–æ: {prediction}")
        else:
            print("‚ùå –ù–µ–º–∞—î –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.")