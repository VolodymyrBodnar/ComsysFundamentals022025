import os
from multiprocessing import Pool
from collections import defaultdict

file_list = [
    "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.md",
    "–ë–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤—ñ—Å—Ç—å —É –ø–∞–π—Ç–æ–Ω.md",
    "–ë–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–Ω—ñ—Å—Ç—å —Ç–∞ –ø–∞—Ä–∞–ª–µ–ª—ñ–∑–º.md",
    "–ü–∞—Ä–∞–ª–µ–ª—å–Ω—ñ_–æ–±—á–∏—Å–ª–µ–Ω–Ω—è_—ñ_—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ_–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.md"
    ]


# ---------------------- 2. –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ ----------------------
def read_file(filename):
    """–ó—á–∏—Ç—É—î –≤–º—ñ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É."""
    with open(filename, "r", encoding="utf-8") as f:
        return f.read().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É

# ---------------------- 3. –§–∞–∑–∞ Map: –†–æ–∑–±–∏—Ç—Ç—è —Ç–µ–∫—Å—Ç—É –Ω–∞ –±—ñ–≥—Ä–∞–º–∏ ----------------------
def map_function(text):
    """–†–æ–∑–±–∏–≤–∞—î —Ç–µ–∫—Å—Ç –Ω–∞ –±—ñ–≥—Ä–∞–º–∏ (–ø–∞—Ä–∏ —Å–ª—ñ–≤)."""
    words = text.split()
    bigrams = [(words[i], words[i + 1]) for i in range(len(words) - 1)]
    return [(bigram, 1) for bigram in bigrams]

# ---------------------- 4. –§–∞–∑–∞ Shuffle: –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –±—ñ–≥—Ä–∞–º ----------------------
def shuffle(mapped_data):
    """–ì—Ä—É–ø—É—î –±—ñ–≥—Ä–∞–º–∏, —â–æ–± –æ–±‚Äô—î–¥–Ω–∞—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ –∫–ª—é—á—ñ."""
    grouped_data = defaultdict(list)
    for key, value in mapped_data:
        grouped_data[key].append(value)
    return grouped_data

# ---------------------- 5. –§–∞–∑–∞ Reduce: –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—Ç–æ—Ç ----------------------
def reduce_function(key_values):
    """–û–±—á–∏—Å–ª—é—î —Å—É–º—É —á–∞—Å—Ç–æ—Ç –¥–ª—è –∫–æ–∂–Ω–æ—ó –±—ñ–≥—Ä–∞–º–∏."""
    key, values = key_values
    return (key, sum(values))

# ---------------------- 6. –§—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–æ–≤–∞ ----------------------
def predict_next_word(word, model):
    """–ü—Ä–æ–≥–Ω–æ–∑—É—î –Ω–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –±—ñ–≥—Ä–∞–º."""
    candidates = {key[1]: count for key, count in model.items() if key[0] == word}
    if not candidates:
        return None
    return max(candidates, key=candidates.get)  # –ù–∞–π–±—ñ–ª—å—à –≤–∂–∏–≤–∞–Ω–µ —Å–ª–æ–≤–æ

# ---------------------- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ----------------------
if __name__ == "__main__":
    with Pool() as pool:
        texts = pool.map(read_file, file_list)  # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        mapped_results = pool.map(map_function, texts)  # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É

    # –û–±‚Äô—î–¥–Ω—É—î–º–æ –≤—Å—ñ –±—ñ–≥—Ä–∞–º–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    flat_mapped = [pair for sublist in mapped_results for pair in sublist]

    # –§–∞–∑–∞ Shuffle: –≥—Ä—É–ø—É—î–º–æ –±—ñ–≥—Ä–∞–º–∏
    shuffled = shuffle(flat_mapped)

    # –§–∞–∑–∞ Reduce: –æ–±—á–∏—Å–ª—é—î–º–æ —á–∞—Å—Ç–æ—Ç–∏ –±—ñ–≥—Ä–∞–º –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    with Pool() as pool:
        reduced_results = pool.map(reduce_function, shuffled.items())

    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ —É —Å–ª–æ–≤–Ω–∏–∫
    final_model = dict(reduced_results)

    # ---------------------- CLI –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ----------------------
    print("üìñ Simple CLI Chatbot using MapReduce")
    print("Type a word and get the most probable next word (type 'exit' to quit).")

    while True:
        user_input = input("\nEnter a word: ").strip().lower()
        if user_input == "exit":
            print("Goodbye! üëã")
            break

        prediction = predict_next_word(user_input, final_model)
        if prediction:
            print(f"ü§ñ Predicted next word: {prediction}")
        else:
            print("‚ùå No prediction available for this word.")